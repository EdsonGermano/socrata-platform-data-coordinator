package com.socrata.datacoordinator.truth.sql

import java.sql.ResultSet

trait SqlColumnRep[Type, Value] {
  /** The logical type of this column */
  def representedType: Type

  /** The "base name" from which physical column names are derived.  This must
    * be a legal SQL column name without quotes! */
  def base: String

  /** Physical SQL table columns used by this logical column. */
  def physColumns: Array[String]

  /** Types of the physical SQL table columns used by this logical column.
    * @note This will have the same length as `physColumns`. */
  def sqlTypes: Array[String]

  /** Column-names to use in a `COPY` statement which inserts this column. */
  def physColumnsForInsert: Array[String] = physColumns // may be overridden

  /** Column-names to use in a `SELECT` statement which queries this column. */
  def physColumnsForQuery: Array[String] = physColumns // may be overridden

  /** @param sb The `StringBuilder` to which to add the data.
    * @param v The value to add; its type must be compatible with `representedType`.
    */
  def csvifyForInsert(sb: java.lang.StringBuilder, v: Value)

  /** @return An estimate of the size of the data that would be generated by `csvifyForInsert`.
    * @note This is only a ballpark estimate. */
  def estimateInsertSize(v: Value): Int

  /** @param sb The `StringBuilder` to which to add the data.
    * @param v The value to add; its type must be compatible with `representedType`.
    */
  def SETsForUpdate(sb: java.lang.StringBuilder, v: Value)

  /** @return An estimate of the size of the data that would be generated by `SETsForUpdate`.
    * @note This is only a ballpark estimate. */
  def estimateUpdateSize(v: Value): Int

  /** Extract a value from the result set.  This will "use up" a number of
    * columns equal to `physColumnsForQuery.length`.
    */
  def fromResultSet(rs: ResultSet, start: Int): Value

  /** Helper function to create physical column names for types with multiple physical columns. */
  protected def physCol(suffix: String) = "\"" + base + "$" + suffix + "\""
}
