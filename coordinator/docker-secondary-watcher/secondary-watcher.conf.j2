com.socrata.coordinator.secondary-watcher {
  # Currently hardcoding for a single datacoordinator instance.
  instance = alpha

  # So we have good news and bad news.
  # The bad news is in the docker world we don't have the notion of an instance that will come back and 
  # reclaim its work based on its own uuid when it restarts, ever new container will have a new uuid.
  # The good news is that once we accept that containers will never come back with their own UUID
  # and will be killed quickly, having a shorter claim timeout is ok despite still having a bug where
  # we stop the claim manager update when we start shutting down, not when we finish, so if we have
  # an extended shutdown our claim can be stolen.
  watcher-id = "{{ UUID }}"
  claim-timeout = "30m"

  database {
    host = "{{ DATA_COORDINATOR_DB_HOST }}"
    port = "{{ DATA_COORDINATOR_DB_PORT }}"
    database = "{{ DATA_COORDINATOR_DB_NAME }}"
    username = "{{ DATA_COORDINATOR_DB_USER }}"
    {{ DATA_COORDINATOR_DB_PASSWORD_LINE }}
  }

  secondary {
    path = /srv/secondary-watcher/plugins
    # unused
    defaultGroups = []
    groups = { }

    # The derived image will include the secondary configuration information necessary for the
    # specific secondary type.  We run a separate secondary watcher per secondary type for
    # isolation and to independently control scaling.
    include "/srv/secondary-watcher/secondary.conf"
  }

  metrics {
    enable-graphite = {{ ENABLE_GRAPHITE }}
    graphite-host = "{{ GRAPHITE_HOST }}"
    graphite-port = "{{ GRAPHITE_PORT }}"
    log-metrics = {{ LOG_METRICS }}
  }
}
